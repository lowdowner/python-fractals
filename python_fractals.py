# -*- coding: utf-8 -*-
"""Python Fractals

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jOP3HJ3ax14RyyKlou6psP8QJGEEF9Fw
"""

import numpy as np
import matplotlib.pyplot as plt

def mandelbrot(c, max_iter):
    z = 0
    n = 0
    while abs(z) <= 2 and n < max_iter:
        z = z**2 + c
        n += 1
    if n == max_iter:
        return 0
    else:
        return n

def plot_mandelbrot(width, height, x_min, x_max, y_min, y_max, max_iter):
    image = np.zeros((width, height))

    for x in range(width):
        for y in range(height):
            real = x_min + x * (x_max - x_min) / (width - 1)
            imag = y_min + y * (y_max - y_min) / (height - 1)
            c = complex(real, imag)
            color = mandelbrot(c, max_iter)
            image[x, y] = color

    plt.imshow(image, cmap='viridis', extent=(x_min, x_max, y_min, y_max))
    plt.colorbar()
    plt.title('Mandelbrot Set')
    plt.show()

# Set parameters
width, height = 800, 800
x_min, x_max = -2, 2
y_min, y_max = -2, 2
max_iter = 100

# Plot Mandelbrot set
plot_mandelbrot(width, height, x_min, x_max, y_min, y_max, max_iter)

import numpy as np
import matplotlib.pyplot as plt

def draw_geometric_pattern(num_layers, radius_multiplier, repetitions):
    fig, ax = plt.subplots()
    ax.set_aspect('equal', 'box')

    for i in range(repetitions):
        for layer in range(1, num_layers + 1):
            theta = np.linspace(0, 2 * np.pi, 100 * layer)
            radius = layer * radius_multiplier
            x = radius * np.cos(theta) + i * 2 * radius_multiplier * num_layers
            y = radius * np.sin(theta)
            ax.plot(x, y, color='blue')

    plt.axis('off')
    plt.show()

# Set parameters
num_layers = 6
radius_multiplier = 10
repetitions = 3

# Draw the geometric pattern
draw_geometric_pattern(num_layers, radius_multiplier, repetitions)

